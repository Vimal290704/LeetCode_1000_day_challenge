https://leetcode.com/problems/put-marbles-in-bags/description/

Description

-> You have k bags. You are given a 0-indexed integer array weights where weights[i] is the weight of the ith marble. You are also given the integer k.

Divide the marbles into the k bags according to the following rules:

No bag is empty.
If the ith marble and jth marble are in a bag, then all marbles with an index between the ith and jth indices should also be in that same bag.
If a bag consists of all the marbles with an index from i to j inclusively, then the cost of the bag is weights[i] + weights[j].
The score after distributing the marbles is the sum of the costs of all the k bags.

Return the difference between the maximum and minimum scores among marble distributions.


Approach:-

-> We have to make k paritions and the contribution of each partition is sum of start and last element of that partition.
-> Either we can use recursions to make for each element whether to choose them or not and from those we can get nCk number of ways to find scores and get the maximum and minimum out of all those as well as get the difference but the main problem is the number of iterations will be n^2.k
-> We can optimize it to n^2 using Dynammic Programming but then also it will be above our constraints.
-> When we try to calcuate for some testcase then we can find the below pattern


